# app.py
# ------------------------------------------------------------
# „Ç≥„É°„É≥„Éà„ÇØ„É™„ÉÉ„ÉóÔºàHTML„É°„Éº„É´Ôºâ„Ç∏„Çß„Éç„É¨„Éº„Çø„ÉºÔºàStreamlitÔºâ
# - ÈÄ±Ê¨°„ÅßÂ§âÊõ¥„Åô„ÇãÁÆáÊâÄ„Çí„Éï„Ç©„Éº„É†ÂÖ•Âäõ„Åó„ÄÅHTML„ÇíËá™ÂãïÁîüÊàê
# - „Ç≥„É°„É≥„ÉÜ„Éº„Çø„Éº7Âêç„ÅÆ„Éá„Éï„Ç©„É´„Éà„Çª„ÉÉ„Éà„ÇíÂÜÖËîµ„ÉªÁ∑®ÈõÜÂèØÔºà‰øùÂ≠ò„Å™„ÅóÔºâ
# - „Ç´„Éº„Éâ„Å´Áï•Ê≠¥ÔºàbioÔºâ„ÇíË°®Á§∫ÂèØËÉΩ
# - „É¢„Éé„Ç∞„É©„É†„ÅØÂ∏∏„Å´Ê≠£ÂÜÜÔºàOutlookÁ≠â„Åß„ÇÇÂ¥©„Çå„Å´„Åè„ÅÑÔºâ
# - Ê∞èÂêç„ÅÆÂè≥„Å´ÊâÄÂ±û„ÇíÊ®™‰∏¶„Å≥Ë°®Á§∫
# - Ë®ò‰∫ã„Çø„Ç§„Éà„É´„ÅØÂ∑¶ÂØÑ„Åõ„ÉªÂè∑Êï∞„ÅÆÂè≥„Åã„ÇâÈñãÂßã„Éª‰∏äÁ´ØÊèÉ„Åà
# - „ÄåË®ò‰∫ã„ÇíË™≠„ÇÄ„Äç„ÅØÂà•„Çø„ÉñÔºàtarget="_blank"Ôºâ
# - NEW: Âêå‰∏ÄË®ò‰∫ãÔºàÂè∑Êï∞Ôºã„Çø„Ç§„Éà„É´Ôºã„É™„É≥„ÇØÔºâ„ÅÆË§áÊï∞„Ç≥„É°„É≥„Éà„Çí1Êûö„Å´Ëá™ÂãïÁµ±Âêà
# ------------------------------------------------------------

from __future__ import annotations

import re
import html
from datetime import date
from typing import List, Dict, Optional
from collections import OrderedDict

import streamlit as st
from streamlit.components.v1 import html as st_html


# =========================
# „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£
# =========================
def escape_nl2br(text: str) -> str:
    """HTML„Ç®„Çπ„Ç±„Éº„Éó + ÊîπË°å„Çí <br> „Å´Â§âÊèõ"""
    if text is None:
        return ""
    return html.escape(text).replace("\n", "<br>")


def auto_monogram(full_name: str) -> str:
    """
    Ê∞èÂêç„Åã„Çâ„É¢„Éé„Ç∞„É©„É†Ôºà‰∏∏„Ç¢„Ç§„Ç≥„É≥„Å´Ë°®Á§∫„Åô„Çã1ÊñáÂ≠óÔºâ„ÇíËá™ÂãïÊäΩÂá∫„ÄÇ
      - „Çπ„Éö„Éº„ÇπÔºàÂçäËßí/ÂÖ®ËßíÔºâ„ÅßÂßì„ÉªÂêç„ÇíÂàÜËß£„Åó„ÄÅÊúÄÂàù„ÅÆ„Éà„Éº„ÇØ„É≥„ÅÆÂÖàÈ†≠1ÊñáÂ≠ó
      - ÂàÜËß£„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅØÊñáÂ≠óÂàó„ÅÆÂÖàÈ†≠1ÊñáÂ≠ó
    """
    if not full_name:
        return "Âêç"
    tokens = re.split(r"[ \u3000]+", full_name.strip())
    if tokens and tokens[0]:
        return tokens[0][0]
    return full_name.strip()[0]


def format_delivery_date(d: date, style: str) -> str:
    """ÈÖç‰ø°Êó•„ÅÆË°®Ë®ò„ÇíÁîüÊàê„ÄÇ"""
    if style == "YMD":
        return f"üìÖ {d.year}Âπ¥{d.month}Êúà{d.day}Êó•ÈÖç‰ø°Âè∑"
    return f"üìÖ {d.month}Êúà{d.day}Êó•ÈÖç‰ø°Âè∑"


def color_cycle(idx: int) -> str:
    """„Ç´„Éº„Éâ‰∏äÈÉ®„Çπ„Éà„É™„ÉÉ„ÉóËâ≤„ÅÆÊó¢ÂÆö„Çµ„Ç§„ÇØ„É´„ÄÇ"""
    palette = ["#c7d2fe", "#a5b4fc"]
    return palette[idx % len(palette)]


def ensure_state(key: str, default):
    """st.session_state „Å´ key „ÅåÁÑ°„Åë„Çå„Å∞ default „Çí„Çª„ÉÉ„Éà"""
    if key not in st.session_state:
        st.session_state[key] = default


# =========================
# „Éá„Éï„Ç©„É´„Éà„ÅÆ„Ç≥„É°„É≥„ÉÜ„Éº„Çø„ÉºÂÆöÁæ©
# =========================
def get_default_commentators() -> List[Dict[str, object]]:
    """
    „Éá„Éï„Ç©„É´„Éà7Âêç„ÄÇ3Áï™„ÅØË¶Å‰ª∂„Å´Âêà„Çè„Åõ„Å¶
      - Ê∞èÂêç: ÂåøÂêç
      - ÊâÄÂ±û: Á©∫ÊñáÂ≠ó
      - Áï•Ê≠¥: Á®éÁêÜÂ£´
    „Å®„Åó„Å¶ÂàùÊúüÂåñ„ÄÇ
    """
    return [
        {
            "id": 1,
            "name": "Â†ÄÂÜÖÁúû‰πã",
            "org": "Â†ÄÂÜÖÁúû‰πãÁ®éÁêÜÂ£´‰∫ãÂãôÊâÄ",
            "bio": "Â§ßÈò™ÂõΩÁ®éÂ±ÄÂõΩÁ®éË®üÂãôÂÆòÂÆ§ÂõΩÁ®éÂÆüÊüªÂÆò„ÄÅÂØ©ÁêÜÂ∞ÇÈñÄÂÆòÔºàË≥áÁî£Á®éÔºâ„ÄÅÂ§ßÈò™ÂõΩÁ®é‰∏çÊúçÂØ©Âà§ÊâÄÂõΩÁ®éÂØ©ÊüªÂÆò„ÇíÁµå„Å¶„ÄÅÂπ≥Êàê28Âπ¥Á®éÁêÜÂ£´‰∫ãÂãôÊâÄÈñãÊ•≠„ÄÅ‰ª§Âíå5Âπ¥6Êúà„Çà„ÇäËøëÁïøÁ®éÁêÜÂ£´‰ºöËøëÁïøÁ®éÂãôÁ†îÁ©∂„Çª„É≥„Çø„ÉºÁ†îÁ©∂Âì°",
        },
        {
            "id": 2,
            "name": "ÊùâÊùëÂçöÂè∏",
            "org": "ÊùâÊùëÂçöÂè∏Á®éÁêÜÂ£´‰∫ãÂãôÊâÄ",
            "bio": "Â§ßÈò™ÂõΩÁ®éÂ±ÄÊ∂àË≤ªÁ®éË™≤Ë™≤Èï∑Ë£ú‰Ωê„ÄÅÂ§ßÈò™ÂõΩÁ®éÂ±ÄË™≤Á®éÁ¨¨‰∏ÄÈÉ®ÂõΩÁ®éË®üÂãôÂÆòÂÆ§‰∏ª‰ªªÂõΩÁ®éË®üÂãôÂÆò„Å™„Å©„ÇíÁµå„Å¶‰ª§Âíå2Âπ¥Á®éÁêÜÂ£´‰∫ãÂãôÊâÄÈñãÊ•≠„ÄÄÂ§ßÈò™ÂõΩÁ®éÂ±ÄÈñìÁ®éÂçîÂäõ‰ºöÈÄ£Âêà‰ºö Â∞ÇÂãôÁêÜ‰∫ã",
        },
        {
            "id": 3,
            "name": "ÂåøÂêç",
            "org": "",
            "bio": "Á®éÁêÜÂ£´",
        },
        {
            "id": 4,
            "name": "Ê∏°ÊúÉÁõ¥‰πü",
            "org": "Êó•Êù±ÈõªÂ∑•Ê†™Âºè‰ºöÁ§æ",
            "bio": "ÁµåÁêÜË≤°ÂãôÁµ±Êã¨ÈÉ® Á®éÂãôÈÉ®Èï∑„ÄÅÁêÜ‰∫ã ÁµåÁêÜË≤°ÂãôÊú¨ÈÉ® Á®éÂãôÈÉ®Èï∑„ÄÅ„Éï„Çß„É≠„Éº ÁµåÁêÜË≤°ÂãôÊú¨ÈÉ® Á®éÂãôÈÉ®Èï∑„ÇíÁµå„Å¶„ÄÅÁµåÁêÜË≤°ÂãôÊú¨ÈÉ® „Éï„Çß„É≠„ÉºÔºà„Ç∞„É≠„Éº„Éê„É´Á®éÂãô„Éû„Éç„Ç∏„É°„É≥„ÉàÊãÖÂΩìÔºâ",
        },
        {
            "id": 5,
            "name": "Ê†óÂéüÊ≠£Êòé",
            "org": "Êù±„É¨Ê†™Âºè‰ºöÁ§æ",
            "bio": "ÁêÜ‰∫ãÔºàÁ®éÂãôÔºâ Á®éÂãôÂÆ§Èï∑„ÇíÁµå„Å¶„ÄÅÁèæÂú®„ÄÅ„Ç∑„Éã„Ç¢„Éï„Çß„É≠„ÉºÔºàÁ®éÂãô‰ºöË®àÔºâ Ë≤°ÂãôÁµåÁêÜÈÉ®ÈñÄÊãÖÂΩì",
        },
        {
            "id": 6,
            "name": "ËÉΩÂã¢Ëã±ÈõÑ",
            "org": "Ê†™Âºè‰ºöÁ§æ„ÇØ„Éú„Çø",
            "bio": "Ë≤°ÂãôÈÉ® Á®éÂãô„Ç∞„É´„Éº„ÉóÈï∑„ÄÅÁ®éÂãôÈÉ®Èï∑„ÇíÁµå„Å¶Áõ£ÊüªÂΩπÂÆ§ Â∞Ç‰ªªÁõ£ÊüªÂΩπ",
        },
        {
            "id": 7,
            "name": "Ëó§Áî∞ÊúâÂ≠ê",
            "org": "„Ç¢„Éº„ÇπË£ΩËñ¨Ê†™Âºè‰ºöÁ§æ",
            "bio": "Á®éÁêÜÂ£´Ê≥ï‰∫∫„Åß„ÅÆÂã§Âãô„ÇíÁµå„Å¶„ÄÅË§áÊï∞„ÅÆ‰∏äÂ†¥‰ºÅÊ•≠„ÅßÂâØÈÉ®Èï∑„Å™„Å©„ÅÆÁÆ°ÁêÜËÅ∑„Å®„Åó„Å¶„ÄÅÂà∂Â∫¶‰ºöË®à„Åä„Çà„Å≥ÁµåÁêÜDX„Çí‰∏ª„Å´ÊãÖÂΩì„ÄÇÁèæÂú®„Ç¢„Éº„ÇπË£ΩËñ¨Ê†™Âºè‰ºöÁ§æ „Éï„Ç°„Ç§„Éä„É≥„Çπ„Éû„Éç„Ç∏„É°„É≥„ÉàÈÉ® ‰ºÅÁîªË™≤ Ë™≤Èï∑Ë£ú‰Ωê",
        },
    ]


# =========================
# HTML„É¨„É≥„ÉÄ„É™„É≥„Ç∞ÔºàÂçò‰∏Ä„Ç´„Éº„ÉâÔºâ
# =========================
def render_card(
    idx: int,
    issue_label: str,
    article_title: str,
    comment_text: str,
    commenter_name: str,
    commenter_org: str,
    link_url: str,
    strip_color: str,
    monogram: Optional[str] = None,
    comment_bar_color: str = "#2563eb",
    commenter_bio: str = "",
) -> str:
    """1Êûö„ÅÆ„Ç´„Éº„ÉâÔºàË®ò‰∫ãÔºãÂçò‰∏Ä„Ç≥„É°„É≥„ÉàÔºâHTML„ÇíËøî„Åô„ÄÇ"""
    _issue_label = escape_nl2br(issue_label)
    _article_title = escape_nl2br(article_title)
    _comment_text = escape_nl2br(comment_text)
    _commenter_name = escape_nl2br(commenter_name)
    _commenter_org = escape_nl2br(commenter_org)
    _commenter_bio = escape_nl2br(commenter_bio or "")
    _link_url = (link_url or f"#article{idx+1}").strip()
    _strip_color = strip_color or color_cycle(idx)
    _mono = (monogram or auto_monogram(commenter_name)).strip()[:1] or "Âêç"

    bio_html = (
        f'<div style="color:#94a3b8;font:12px/1.6 Arial,\'Hiragino Kaku Gothic ProN\',Meiryo,sans-serif;'
        f'word-break:break-word;margin-top:2px;">{_commenter_bio}</div>'
        if _commenter_bio
        else ""
    )

    card_html = f"""
    <table role="presentation" width="100%" cellpadding="0" cellspacing="0" border="0" style="background:#ffffff;border:1px solid #e5e7eb;border-radius:12px;">
      <tbody>
        <tr><td style="height:4px;background:{_strip_color};border-top-left-radius:12px;border-top-right-radius:12px;"></td></tr>

        <!-- Ë¶ãÂá∫„ÅóÔºöÂè∑Êï∞ + Ë®ò‰∫ã„Çø„Ç§„Éà„É´ -->
        <tr>
          <td style="padding:16px 20px 8px 20px;">
            <table role="presentation" width="100%" cellpadding="0" cellspacing="0" border="0">
              <tbody><tr>
                <td style="text-align:left;">
                  <span style="display:inline-block;vertical-align:middle;white-space:nowrap;color:#475569;font-weight:600;font-size:13px;line-height:13px;">{_issue_label}</span>
                  <span style="display:inline-block;vertical-align:middle;margin-left:6px;color:#0f172a;font-weight:700;font-size:19px;line-height:19px;word-break:break-word;">{_article_title}</span>
                </td>
              </tr></tbody>
            </table>
          </td>
        </tr>

        <tr><td style="padding:6px 20px 0 20px;color:#64748b;font:600 13px/1 Arial,'Hiragino Kaku Gothic ProN',Meiryo,sans-serif;">„Ç≥„É°„É≥„Éà</td></tr>
        <tr>
          <td style="padding:10px 20px 6px 20px;">
            <table role="presentation" width="100%" cellpadding="0" cellspacing="0" border="0">
              <tbody><tr>
                <td style="width:6px;background:{comment_bar_color};"></td>
                <td style="padding:8px 0 8px 12px;color:#334155;font:15px/1.8 Arial,'Hiragino Kaku Gothic ProN',Meiryo,sans-serif;">{_comment_text}</td>
              </tr></tbody>
            </table>
          </td>
        </tr>

        <tr>
          <td style="padding:2px 20px 0 20px;">
            <table role="presentation" cellpadding="0" cellspacing="0" border="0">
              <tbody><tr>
                <td style="width:1%;vertical-align:middle;">
                  <div style="width:40px;height:40px;max-width:40px;min-width:40px;border-radius:50%;
                              background:#eef2f7;color:#64748b;
                              font:700 18px Arial,'Hiragino Kaku Gothic ProN',Meiryo,sans-serif;
                              line-height:40px;text-align:center;">
                    {_mono}
                  </div>
                </td>
                <td style="width:12px;"></td>
                <td style="color:#0f172a;font:600 15px/1.3 Arial,'Hiragino Kaku Gothic ProN',Meiryo,sans-serif;">
                  <table role="presentation" cellpadding="0" cellspacing="0" border="0">
                    <tbody><tr>
                      <td style="white-space:nowrap;vertical-align:baseline;color:#0f172a;font:600 15px/1.3 Arial,'Hiragino Kaku Gothic ProN',Meiryo,sans-serif;">{_commenter_name}</td>
                      <td style="width:10px;"></td>
                      <td style="vertical-align:baseline;color:#64748b;font:13px/1.4 Arial,'Hiragino Kaku Gothic ProN',Meiryo,sans-serif;word-break:break-word;">{_commenter_org}</td>
                    </tr></tbody>
                  </table>
                  {bio_html}
                </td>
              </tr></tbody>
            </table>
          </td>
        </tr>

        <tr>
          <td style="padding:12px 20px 18px 20px;">
            <table role="presentation" width="100%" cellpadding="0" cellspacing="0" border="0">
              <tbody><tr>
                <td style="background:#e8f0ff;border:1px solid #c7d2fe;border-radius:8px;">
                  <a href="{_link_url}" target="_blank" rel="noopener noreferrer"
                     style="display:block;width:100%;text-align:center;color:#1d4ed8;text-decoration:none;font:700 15px/1 Arial,'Hiragino Kaku Gothic ProN',Meiryo,sans-serif;padding:12px 18px;border-radius:8px;">
                    Ë®ò‰∫ã„ÇíË™≠„ÇÄ
                  </a>
                </td>
              </tr></tbody>
            </table>
          </td>
        </tr>
      </tbody>
    </table>
    """
    return card_html


# =========================
# HTML„É¨„É≥„ÉÄ„É™„É≥„Ç∞ÔºàË§áÊï∞„Ç≥„É°„É≥„Éà„Çí1Êûö„Å´ÈõÜÁ¥ÑÔºâ
# =========================
def render_card_grouped(
    idx: int,
    issue_label: str,
    article_title: str,
    link_url: str,
    strip_color: str,
    entries: List[Dict[str, str]],  # {comment, name, org, bio, monogram, comment_bar_color}
) -> str:
    _issue_label = escape_nl2br(issue_label)
    _article_title = escape_nl2br(article_title)
    _link_url = (link_url or f"#article{idx+1}").strip()
    _strip_color = strip_color or color_cycle(idx)

    commentators = [escape_nl2br(e.get("name", "")) for e in entries]
    monograms = [(e.get("monogram") or auto_monogram(e.get("name", "")))[:1] or "Âêç" for e in entries]

    chips_html = "".join(
        f"""<div style="width:28px;height:28px;border-radius:50%;background:{e.get("comment_bar_color","#eef2f7")};
                    color:#ffffff;font:700 14px/28px Arial,'Hiragino Kaku Gothic ProN',Meiryo,sans-serif;
                    text-align:center;display:inline-block;margin-right:6px;">{m}</div>"""
        for m, e in zip(monograms[:5], entries[:5])
    )
    more_badge = ""
    if len(monograms) > 5:
        more_badge = f"""<span style="display:inline-block;margin-left:4px;color:#475569;
                          font:600 12px/1 Arial,'Hiragino Kaku Gothic ProN',Meiryo,sans-serif;">+{len(monograms)-5}</span>"""

    # === „Ç≥„É°„É≥„Éà„Éñ„É≠„ÉÉ„ÇØÁîüÊàê ===
    comment_blocks = []
    for e in entries:
        bar = e.get("comment_bar_color") or "#2563eb"
        _comment = escape_nl2br(e.get("comment", ""))
        _name = escape_nl2br(e.get("name", ""))
        _org = escape_nl2br(e.get("org", ""))
        _bio = escape_nl2br(e.get("bio", "") or "")
        _mono = (e.get("monogram") or auto_monogram(e.get("name", "")))[:1] or "Âêç"

        bio_html = (
            f"<div style=\"color:#94a3b8;font:12px/1.6 Arial,'Hiragino Kaku Gothic ProN',Meiryo,sans-serif;"
            f"word-break:break-word;margin-top:2px;\">{_bio}</div>"
            if _bio
            else ""
        )

        block = f"""
        <!-- ÂÄãÂà•„Ç≥„É°„É≥„Éà„Éñ„É≠„ÉÉ„ÇØ -->
        <tr><td style="height:4px;background:{bar};border-radius:4px 4px 0 0;"></td></tr>

        <tr><td style="padding:10px 20px 0 20px;">
          <table role="presentation" width="100%" cellpadding="0" cellspacing="0" border="0">
            <tbody>
              <tr>
                <td style="width:6px;background:{bar};"></td>
                <td style="padding:10px 0 10px 12px;color:#334155;font:15px/1.8 Arial,'Hiragino Kaku Gothic ProN',Meiryo,sans-serif;">{_comment}</td>
              </tr>
            </tbody>
          </table>
        </td></tr>

        <tr><td style="padding:2px 20px 10px 20px;">
          <table role="presentation" cellpadding="0" cellspacing="0" border="0">
            <tbody><tr>
              <td style="width:1%;vertical-align:middle;">
                <div style="width:40px;height:40px;border-radius:50%;background:{bar};
                            color:#ffffff;font:700 18px Arial,'Hiragino Kaku Gothic ProN',Meiryo,sans-serif;
                            line-height:40px;text-align:center;">
                  {_mono}
                </div>
              </td>
              <td style="width:12px;"></td>
              <td style="color:#0f172a;font:600 15px/1.3 Arial,'Hiragino Kaku Gothic ProN',Meiryo,sans-serif;">
                <table role="presentation" cellpadding="0" cellspacing="0" border="0">
                  <tbody><tr>
                    <td style="white-space:nowrap;vertical-align:baseline;color:#0f172a;font:600 15px/1.3 Arial,'Hiragino Kaku Gothic ProN',Meiryo,sans-serif;">{_name}</td>
                    <td style="width:10px;"></td>
                    <td style="vertical-align:baseline;color:#64748b;font:13px/1.4 Arial,'Hiragino Kaku Gothic ProN',Meiryo,sans-serif;word-break:break-word;">{_org}</td>
                  </tr></tbody>
                </table>
                {bio_html}
              </td>
            </tr></tbody>
          </table>
        </td></tr>
        """
        comment_blocks.append(block)

    comments_html = "\n<tr><td style=\"height:8px;\"></td></tr>\n".join(comment_blocks)

    return f"""
    <table role="presentation" width="100%" cellpadding="0" cellspacing="0" border="0"
           style="background:#ffffff;border:1px solid #e5e7eb;border-radius:12px;">
      <tbody>
        <tr><td style="height:4px;background:{_strip_color};
                      border-top-left-radius:12px;border-top-right-radius:12px;"></td></tr>

        <!-- Ë®ò‰∫ã„Çø„Ç§„Éà„É´ -->
        <tr>
          <td style="padding:16px 20px 6px 20px;">
            <table role="presentation" width="100%">
              <tbody><tr>
                <td style="text-align:left;">
                  <span style="display:inline-block;vertical-align:middle;white-space:nowrap;
                               color:#475569;font-weight:600;font-size:13px;line-height:13px;">
                    {_issue_label}
                  </span>
                  <span style="display:inline-block;vertical-align:middle;margin-left:6px;
                               color:#0f172a;font-weight:700;font-size:19px;line-height:19px;">
                    {_article_title}
                  </span>
                </td>
                <td style="text-align:right;">
                  <span style="display:inline-block;background:#f1f5ff;border:1px solid #c7d2fe;
                               color:#1d4ed8;font-weight:700;font-size:12px;padding:6px 10px;
                               border-radius:14px;">
                    {len(entries)}‰ª∂ / {len(set(commentators))}Âêç
                  </span>
                </td>
              </tr></tbody>
            </table>
            <div style="margin-top:8px;">{chips_html}{more_badge}</div>
          </td>
        </tr>

        {comments_html}

        <!-- Ë®ò‰∫ã„É™„É≥„ÇØ -->
        <tr>
          <td style="padding:14px 20px 18px 20px;">
            <table role="presentation" width="100%">
              <tbody><tr>
                <td style="background:#e8f0ff;border:1px solid #c7d2fe;border-radius:8px;">
                  <a href="{_link_url}" target="_blank" rel="noopener noreferrer"
                     style="display:block;width:100%;text-align:center;color:#1d4ed8;
                            text-decoration:none;font:700 15px/1 Arial,'Hiragino Kaku Gothic ProN',Meiryo,sans-serif;
                            padding:12px 18px;border-radius:8px;">
                    Ë®ò‰∫ã„ÇíË™≠„ÇÄ
                  </a>
                </td>
              </tr></tbody>
            </table>
          </td>
        </tr>
      </tbody>
    </table>
    """



# =========================
# Âêå‰∏ÄË®ò‰∫ã„Çí„Åæ„Å®„ÇÅ„Çã
# =========================
def group_cards_by_article(rows: List[Dict[str, str]]) -> List[Dict[str, object]]:
    """
    rows: ÂçòÁ•®„ÅÆcards_dataÔºàÊó¢Â≠òÊßãÈÄ†Ôºâ
    return: [{issue, title, link, strip_color, entries:[...] }] „ÅÆÈÖçÂàóÔºàÈ†ÜÂ∫è‰øùÊåÅÔºâ
    """
    buckets: "OrderedDict[tuple, Dict[str, object]]" = OrderedDict()
    for r in rows:
        key = (r.get("issue", "").strip(), r.get("title", "").strip(), r.get("link", "").strip())
        if key not in buckets:
            buckets[key] = {
                "issue": r.get("issue", "").strip(),
                "title": r.get("title", "").strip(),
                "link": r.get("link", "").strip(),
                "strip_color": r.get("strip_color") or "#c7d2fe",
                "entries": [],
            }
        buckets[key]["entries"].append(
            {
                "comment": r.get("comment", ""),
                "name": r.get("name", ""),
                "org": r.get("org", ""),
                "bio": r.get("bio", ""),
                "monogram": r.get("monogram", ""),
                "comment_bar_color": r.get("comment_bar_color", "#2563eb"),
            }
        )
        if not buckets[key]["strip_color"]:
            buckets[key]["strip_color"] = r.get("strip_color") or color_cycle(0)
    return list(buckets.values())


# =========================
# „É°„Éº„É´ÂÖ®‰Ωì„É¨„É≥„ÉÄ„É™„É≥„Ç∞
# =========================
def render_email_full(
    title_text: str,
    badge_text: str,
    header_title: str,
    delivery_text: str,
    description_text: str,
    cards: List[str],
) -> str:
    _title_text = escape_nl2br(title_text)
    _badge_text = escape_nl2br(badge_text)
    _header_title = escape_nl2br(header_title)
    _delivery_text = escape_nl2br(delivery_text)
    _description_text = escape_nl2br(description_text)

    spacer = '<div style="height:18px;line-height:18px;">&nbsp;</div>'
    body_cards_html = spacer.join(cards)

    html_full = f"""<meta charset="UTF-8">
<title>{_title_text}</title>

<!-- 100% wrapper -->
<table role="presentation" width="100%" cellpadding="0" cellspacing="0" border="0" style="margin:0;padding:0;background:#f3f6fb;">
  <tbody><tr>
    <td align="center" style="padding:0;">

      <!-- ===== Header ===== -->
      <table role="presentation" width="100%" cellpadding="0" cellspacing="0" border="0" style="background:#0b1b34;">
        <tbody><tr>
          <td align="center" style="padding:0;">
            <table role="presentation" width="900" cellpadding="0" cellspacing="0" border="0" style="max-width:900px;width:100%;">
              <tbody><tr>
                <td style="padding:20px 24px 12px 24px;">
                  <table role="presentation" width="100%" cellpadding="0" cellspacing="0" border="0">
                    <tbody><tr>
                      <td>
                        <span style="display:inline-block;vertical-align:middle;background:#22315b;border:1px solid #2f3c66;color:#ffffff;font-weight:800;font-size:12px;letter-spacing:.04em;padding:7px 14px;border-radius:16px;font-family:Arial,'Hiragino Kaku Gothic ProN',Meiryo,sans-serif;">{_badge_text}</span>
                        <span style="display:inline-block;vertical-align:middle;margin-left:12px;color:#ffffff;font-weight:800;font-size:22px;letter-spacing:.01em;font-family:Arial,'Hiragino Kaku Gothic ProN',Meiryo,sans-serif;">{_header_title}</span>
                      </td>
                    </tr></tbody>
                  </table>
                  <table role="presentation" width="100%" cellpadding="0" cellspacing="0" border="0">
                    <tbody><tr>
                      <td style="padding-top:8px;color:#dbeafe;font-size:14px;font-family:Arial,'Hiragino Kaku Gothic ProN',Meiryo,sans-serif;">{_delivery_text}</td>
                    </tr></tbody>
                  </table>
                  <table role="presentation" width="100%" cellpadding="0" cellspacing="0" border="0">
                    <tbody><tr>
                      <td style="padding-top:6px;color:#c7d2fe;font-size:13px;line-height:1.7;font-family:Arial,'Hiragino Kaku Gothic ProN',Meiryo,sans-serif;">
                        {_description_text}
                      </td>
                    </tr></tbody>
                  </table>
                </td>
              </tr></tbody>
            </table>
          </td>
        </tr></tbody>
      </table>
      <!-- ===== /Header ===== -->

      <!-- ===== Body ===== -->
      <table role="presentation" width="900" cellpadding="0" cellspacing="0" border="0" style="max-width:900px;width:100%;background:#f3f6fb;">
        <tbody><tr>
          <td style="padding:24px;">
            {body_cards_html}
          </td>
        </tr></tbody>
      </table>
      <!-- ===== /Body ===== -->

      <!-- ===== Footer ===== -->
      <table role="presentation" width="100%" cellpadding="0" cellspacing="0" border="0" style="background:#0b1b34;">
        <tbody><tr>
          <td align="center" style="padding:18px 12px;">
            <div style="color:#ffffff;font:12.5px/1.6 Arial,'Hiragino Kaku Gothic ProN',Meiryo,sans-serif;">
              Copyright¬© 2016 Zeimu Kenkyukai, All rights reserved.
            </div>
            <div style="margin-top:8px;font-family:Arial,'Hiragino Kaku Gothic ProN',Meiryo,sans-serif;">
              <a href="https://www.zeiken.co.jp/privacy/" style="color:#ffffff;text-decoration:none;margin:0 10px;">ÂÄã‰∫∫ÊÉÖÂ†±„ÅÆ‰øùË≠∑„Å´„Å§„ÅÑ„Å¶</a>
              <a href="https://www.zeiken.co.jp/contact/request/" style="color:#ffffff;text-decoration:none;margin:0 10px;">„ÅäÂïè„ÅÑÂêà„Çè„Åõ</a>
            </div>
          </td>
        </tr></tbody>
      </table>
      <!-- ===== /Footer ===== -->

    </td>
  </tr></tbody>
</table>
"""
    return html_full


# =========================
# Streamlit UI
# =========================
st.set_page_config(page_title="„Ç≥„É°„É≥„Éà„ÇØ„É™„ÉÉ„Éó HTML„É°„Éº„Ç´„Éº", layout="wide")

st.title("„Ç≥„É°„É≥„Éà„ÇØ„É™„ÉÉ„ÉóÔºàHTML„É°„Éº„É´Ôºâ„É°„Éº„Ç´„Éº")
st.caption("ÈÄ±Ê¨°„ÅÆÂÖ•ÂäõÂÜÖÂÆπ„Çí„Éï„Ç©„Éº„É†„ÅßË®≠ÂÆö ‚Üí HTML„ÇíÁîüÊàê„Éª„Éó„É¨„Éì„É•„Éº„Éª„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ")

# „Ç≥„É°„É≥„ÉÜ„Éº„Çø„ÉºÔºö„Çª„ÉÉ„Ç∑„Éß„É≥ÂàùÊúüÂåñ
DEFAULT_COMMENTATORS = get_default_commentators()
for i, c in enumerate(DEFAULT_COMMENTATORS):
    ensure_state(f"cmt_name_{i}", c["name"])
    ensure_state(f"cmt_org_{i}", c["org"])
    ensure_state(f"cmt_bio_{i}", c["bio"])
    ensure_state(f"cmt_mono_{i}", auto_monogram(c["name"]))

with st.sidebar:
    st.header("ÂÖ•ÂäõÊñπÊ≥ï")
    input_mode = st.radio(
        "„Ç´„Éº„Éâ„ÅÆÂÖ•ÂäõÊñπÊ≥ï„ÇíÈÅ∏Êäû",
        options=("„Éï„Ç©„Éº„É†„ÅßÂÖ•Âäõ", "CSV„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ"),
        index=0,
    )
    st.markdown("---")
    st.subheader("CSV‰ªïÊßòÔºà‰ªªÊÑèÔºâ")
    st.markdown(
        """
**ÂàóÂêçÔºà„Éò„ÉÉ„ÉÄÂøÖÈ†àÔºâ**  
- `issue` / `title` / `comment` / `name` / `org` / `link`  
**‰ªªÊÑèÂàó**  
- `monogram`  
- `strip_color`  
- `commentator`Ôºà1„Äú7 „Åæ„Åü„ÅØÊ∞èÂêç„Åß„ÄÅË®≠ÂÆö‰∏≠„ÅÆ„Ç≥„É°„É≥„ÉÜ„Éº„Çø„Éº„Åã„ÇâË£úÂÆåÔºâ  
- `bio`ÔºàÁï•Ê≠¥Ôºâ
        """.strip()
    )

    example_csv = (
        "issue,title,comment,name,org,link,monogram,strip_color\n"
        "Á¨¨3742Âè∑,„Ç§„É≥„Éú„Ç§„ÇπÂà∂Â∫¶„Å´„Åä„Åë„ÇãËøîÈÇÑ„Ç§„É≥„Éú„Ç§„Çπ„ÅÆÂèñÊâ±„ÅÑÊòéÁ¢∫Âåñ,üí¨ „Ç≥„É°„É≥„Éà‰æã,Áî∞‰∏≠ Â§™ÈÉé,Áî∞‰∏≠Á®éÁêÜÂ£´‰∫ãÂãôÊâÄ,#article1,,#c7d2fe\n"
        "Á¨¨3743Âè∑,„Éá„Ç∏„Çø„É´ÁµåÊ∏à„Å´„Åä„Åë„ÇãÂõΩÈöõË™≤Á®é„É´„Éº„É´,üí¨ „Ç≥„É°„É≥„Éà‰æã,‰ΩêËó§ Ëä±Â≠ê,ABCÂïÜ‰∫ã ÁµåÁêÜÈÉ®,#article2,,#a5b4fc\n"
    ).encode("utf-8")
    st.download_button(
        "CSVÈõõÂΩ¢„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ",
        data=example_csv,
        file_name="comments_template.csv",
        mime="text/csv",
        use_container_width=True,
    )

# ‚ë† Âü∫Êú¨Ë®≠ÂÆöÔºà„Éò„ÉÉ„ÉÄÔºâ
st.subheader("‚ë† Âü∫Êú¨Ë®≠ÂÆöÔºà„Éò„ÉÉ„ÉÄÔºâ")
c1, c2, c3 = st.columns([1.2, 1.2, 1.0])

with c1:
    title_text = st.text_input(
        "„É°„Éº„É´„ÅÆ<title>Ôºà„Éñ„É©„Ç¶„Ç∂Ë°®Á§∫Áî®Ôºâ",
        value="„Ç≥„É°„É≥„Éà„ÇØ„É™„ÉÉ„ÉóÔºà„É°„Éº„É´ÈÖç‰ø°Áî®„ÉªÂÖ®ÂπÖ„Éò„ÉÉ„ÉÄ„ÉºÔºÜÊ®™Èï∑„Éú„Çø„É≥Ôºâ",
    )
    badge_text = st.text_input("„Éê„ÉÉ„Ç∏Âêç", value="COMMENT CLIP")
with c2:
    header_title = st.text_input("„Éò„ÉÉ„ÉÄ„Éº„ÅÆÂ§ßË¶ãÂá∫„Åó", value="ÈÄ±Âàä Á®éÂãôÈÄö‰ø°")
    delivery_style = st.radio(
        "ÈÖç‰ø°Êó•„ÅÆË°®Ë®ò",
        options=("ÊúàÊó•Ôºà‰æã: 9Êúà1Êó•ÈÖç‰ø°Âè∑Ôºâ", "Âπ¥ÊúàÊó•Ôºà‰æã: 2025Âπ¥9Êúà1Êó•ÈÖç‰ø°Âè∑Ôºâ"),
        index=0,
    )
with c3:
    delivery_date = st.date_input("ÈÖç‰ø°Êó•", value=date.today())
    description_text = st.text_area(
        "Ë™¨ÊòéÊñá",
        value=(
            "Â§öÊßò„Å™Ë¶ñÁÇπ„Åã„Çâ„ÅÆ„Ç≥„É°„É≥„Éà„ÅåË®ò‰∫ã„ÇíË™≠„ÇÄ„Åç„Å£„Åã„Åë„Å®„Å™„Çä„ÄÅÊôÆÊÆµËß¶„Çå„Å™„ÅÑÂàÜÈáé„Å∏„ÅÆÈñ¢ÂøÉ„ÇíÂ∫É„Åí„Åæ„Åô„ÄÇ"
            "„Åæ„Åü„ÄÅ„Ç≥„É°„É≥„Éà„Åå„ÄåÂæå„ÄÖ„ÅÆË®ò‰∫ã„ÅÆË™≠„ÅøËøî„Åó„Äç„Çí‰øÉ„ÅôÊ©üËÉΩ„ÇíÊûú„Åü„Åô„ÅÆ„Åß„ÄÅË®òÊÜ∂„ÅÆÂÆöÁùÄ„ÅÆÂêë‰∏ä„ÇÇÁõÆÁöÑ„ÅÆ‰∏Ä„Å§„Åß„Åô„ÄÇ"
            "‚ÄªÁ®éÂãôÈÄö‰ø°„Éá„Éº„Çø„Éô„Éº„Çπ„Çí„ÅîÂà©Áî®„ÅÆÊñπ„ÅØ„ÄÅ„É≠„Ç∞„Ç§„É≥Âæå„Å´„ÄéË®ò‰∫ã„ÇíË™≠„ÇÄ„Äè„ÇíÊäº‰∏ã„ÅÑ„Åü„Å†„Åè„Å®Ë©≤ÂΩìË®ò‰∫ã„Å∏ÈÅ∑Áßª„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇ"
            "‚ÄªÊú¨„É°„Éº„É´ÂÜÖ„ÅÆ„Ç≥„É°„É≥„Éà„ÅØ„Ç≥„É°„É≥„ÉÜ„Éº„Çø„Éº„ÅÆÁßÅË¶ã„Åß„Åô"
        ),
        height=96,
    )

delivery_text = format_delivery_date(delivery_date, "MD" if delivery_style.startswith("ÊúàÊó•") else "YMD")

# ‚ë° „Ç≥„É°„É≥„ÉÜ„Éº„Çø„ÉºË®≠ÂÆö
st.subheader("‚ë° „Ç≥„É°„É≥„ÉÜ„Éº„Çø„ÉºË®≠ÂÆöÔºà„Åì„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥ÂÜÖ„ÅßÁ∑®ÈõÜÂèØ„Éª‰øùÂ≠ò„Å™„ÅóÔºâ")
st.caption("ÂÖ®„Ç≥„É°„É≥„ÉÜ„Éº„Çø„Éº„Åå„Ç´„Éº„ÉâÂÅ¥„ÅÆ„Éó„É´„ÉÄ„Ç¶„É≥„Å´Ë°®Á§∫„Åï„Çå„Åæ„Åô„ÄÇ„Åì„Åì„Åß„É¢„Éé„Ç∞„É©„É†„ÇÇË®≠ÂÆö„Åß„Åç„Åæ„ÅôÔºà1ÊñáÂ≠óÊé®Â•®Ôºâ„ÄÇ")

cols = st.columns(2)
for i, base in enumerate(get_default_commentators()):
    with cols[i % 2]:
        with st.expander(
            f"{i+1}. {st.session_state[f'cmt_name_{i}']} / {st.session_state[f'cmt_org_{i}'] or 'ÔºàÊâÄÂ±ûÊú™Ë®≠ÂÆöÔºâ'}",
            expanded=(i < 2),
        ):
            st.text_input("Ê∞èÂêç", key=f"cmt_name_{i}")
            st.text_input("ÊâÄÂ±ûÔºàÁ©∫Ê¨ÑÂèØÔºâ", key=f"cmt_org_{i}")
            st.text_area("Áï•Ê≠¥Ôºà‰ªªÊÑèÔºâ", key=f"cmt_bio_{i}", height=80)
            st.text_input("„É¢„Éé„Ç∞„É©„É†Ôºà1ÊñáÂ≠óÊé®Â•®„ÉªÊú™ÂÖ•ÂäõÊôÇ„ÅØÊ∞èÂêç„Åã„ÇâËá™ÂãïÔºâ", key=f"cmt_mono_{i}")

ALL_COMMENTATORS: List[Dict[str, str]] = []
for i, base in enumerate(get_default_commentators()):
    name_i = st.session_state[f"cmt_name_{i}"].strip()
    org_i = st.session_state[f"cmt_org_{i}"].strip()
    bio_i = st.session_state[f"cmt_bio_{i}"].strip()
    mono_raw = (st.session_state.get(f"cmt_mono_{i}", "") or "").strip()
    mono_i = (mono_raw[:1] or auto_monogram(name_i))
    ALL_COMMENTATORS.append(
        {
            "id": base["id"],
            "name": name_i,
            "org": org_i,
            "bio": bio_i,
            "mono": mono_i,
        }
    )

# ‚ë¢ „Ç´„Éº„ÉâË®≠ÂÆöÔºàË®ò‰∫ãÔºã„Ç≥„É°„É≥„ÉàÔºâ
st.subheader("‚ë¢ „Ç´„Éº„ÉâË®≠ÂÆöÔºàË®ò‰∫ãÔºã„Ç≥„É°„É≥„ÉàÔºâ")

cards_data: List[Dict[str, str]] = []

if input_mode == "CSV„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ":
    uploaded = st.file_uploader("CSV„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ", type=["csv"])
    if uploaded is not None:
        import pandas as pd

        try:
            df = pd.read_csv(uploaded)
            required_cols = {"issue", "title", "comment", "name", "org", "link"}
            if not required_cols.issubset(df.columns):
                st.error(f"CSV„Å´ÂøÖË¶Å„Å™Âàó„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô: {sorted(required_cols)}")
            else:
                for i, row in df.iterrows():
                    commentator_token = str(row.get("commentator", "")).strip()
                    cmt_from_token = None
                    if commentator_token:
                        try:
                            token_id = int(float(commentator_token))
                            cmt_from_token = next((c for c in ALL_COMMENTATORS if c["id"] == token_id), None)
                        except Exception:
                            cmt_from_token = next((c for c in ALL_COMMENTATORS if c["name"] == commentator_token), None)

                    name_val = str(row.get("name", "")).strip()
                    org_val = str(row.get("org", "")).strip()
                    bio_val = str(row.get("bio", "")).strip()
                    mono_val = str(row.get("monogram", "")).strip()

                    if cmt_from_token:
                        if not name_val:
                            name_val = cmt_from_token["name"]
                        if not org_val:
                            org_val = cmt_from_token["org"]
                        if not bio_val:
                            bio_val = cmt_from_token.get("bio", "")
                        if not mono_val:
                            mono_val = cmt_from_token.get("mono", "")

                    mono_val = (mono_val[:1] or auto_monogram(name_val))

                    cards_data.append(
                        {
                            "issue": str(row.get("issue", "")).strip(),
                            "title": str(row.get("title", "")).strip(),
                            "comment": str(row.get("comment", "")).strip(),
                            "name": name_val,
                            "org": org_val,
                            "bio": bio_val,
                            "link": str(row.get("link", f"#article{i+1}")).strip(),
                            "monogram": mono_val,
                            "strip_color": str(row.get("strip_color", "")).strip(),
                        }
                    )
                st.success(f"{len(cards_data)} ‰ª∂„ÅÆ„Ç´„Éº„Éâ„ÇíË™≠„ÅøËæº„Åø„Åæ„Åó„Åü„ÄÇÂè≥ÂÅ¥„Åß„Éó„É¨„Éì„É•„ÉºÂèØËÉΩ„Åß„Åô„ÄÇ")
        except Exception as e:
            st.error(f"CSV„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: {e}")

else:
    # „Éï„Ç©„Éº„É†ÂÖ•Âäõ
    comment_bar_color = st.color_picker("„Ç≥„É°„É≥„ÉàÂ∑¶„Éê„ÉºÔºàÊó¢ÂÆöÔºâ„ÅØ #2563eb", value="#2563eb", key="bar")
    num_cards = st.number_input("„Ç´„Éº„ÉâÊï∞Ôºà„Ç≥„É°„É≥„ÉàË°å„ÅÆÊï∞Ôºâ", min_value=1, max_value=40, value=7, step=1)

    def _label(c): return f"{c['name']}Ôºà{c['org'] or 'ÊâÄÂ±ûÊú™Ë®≠ÂÆö'}Ôºâ"
    cmt_options = ["-- ÊâãÂãïÂÖ•Âäõ --"] + [_label(c) for c in ALL_COMMENTATORS]

    for i in range(int(num_cards)):
        with st.expander(f"„Ç´„Éº„ÉâÔºà„Ç≥„É°„É≥„ÉàË°åÔºâ {i+1}", expanded=(i == 0)):
            col1, col2 = st.columns([1.0, 1.0])

            with col1:
                st.text_input("Âè∑Êï∞Ôºà‰æã: Á¨¨3742Âè∑Ôºâ", key=f"issue_{i}", value=f"Á¨¨{3742+i}Âè∑")
                st.text_input("Ë®ò‰∫ã„Çø„Ç§„Éà„É´", key=f"title_{i}", value="")
                strip_color = st.color_picker("„Ç´„Éº„Éâ‰∏äÈÉ®„Çπ„Éà„É™„ÉÉ„ÉóËâ≤ÔºàÂêå‰∏ÄË®ò‰∫ã„ÅßÊúÄÂàù„ÅÆË°å„ÅåÊé°Áî®Ôºâ", value=color_cycle(i), key=f"strip_{i}")

            with col2:
                default_index = (i % len(ALL_COMMENTATORS)) + 1
                selected_label = st.selectbox(
                    "„Ç≥„É°„É≥„ÉÜ„Éº„Çø„ÉºÔºàÈÅ∏„Å∂„Å®‰∏ã„Å∏ÂèçÊò†ÔºèÊâãÂãïÁ∑®ÈõÜÂèØÔºâ",
                    options=cmt_options,
                    index=min(default_index, len(cmt_options) - 1),
                    key=f"cmt_select_{i}",
                )
                selected_cmt = None
                if selected_label != cmt_options[0]:
                    sel_idx = cmt_options.index(selected_label) - 1
                    selected_cmt = ALL_COMMENTATORS[sel_idx]

                name_key, org_key, bio_key, mono_key = f"name_{i}", f"org_{i}", f"bio_{i}", f"mono_{i}"

                if selected_cmt:
                    if not st.session_state.get(name_key, ""):
                        st.session_state[name_key] = selected_cmt["name"]
                    if not st.session_state.get(org_key, ""):
                        st.session_state[org_key] = selected_cmt["org"]
                    if not st.session_state.get(bio_key, ""):
                        st.session_state[bio_key] = selected_cmt.get("bio", "")
                    if not st.session_state.get(mono_key, ""):
                        st.session_state[mono_key] = selected_cmt.get("mono", "") or auto_monogram(selected_cmt["name"])

                if st.button("‚Üë ÈÅ∏Êäû„ÅÆÂÜÖÂÆπ„ÅßÊ∞èÂêç„ÉªÊâÄÂ±û„ÉªÁï•Ê≠¥„Éª„É¢„Éé„Ç∞„É©„É†„Çí‰∏äÊõ∏„Åç", key=f"apply_{i}") and selected_cmt:
                    st.session_state[name_key] = selected_cmt["name"]
                    st.session_state[org_key] = selected_cmt["org"]
                    st.session_state[bio_key] = selected_cmt.get("bio", "")
                    st.session_state[mono_key] = selected_cmt.get("mono", "") or auto_monogram(selected_cmt["name"])

                st.text_input("Ê∞èÂêçÔºà‰æã: Áî∞‰∏≠ Â§™ÈÉéÔºâ", key=name_key)
                st.text_input("ÊâÄÂ±ûÔºàÁ©∫Ê¨ÑÂèØÔºâ", key=org_key)
                st.text_area("Áï•Ê≠¥Ôºà„Ç´„Éº„Éâ„Å´Ë°®Á§∫„Éª‰ªªÊÑèÔºâ", key=bio_key, height=72)
                st.text_input("„É¢„Éé„Ç∞„É©„É†Ôºà‰ªªÊÑè„Éª1ÊñáÂ≠óÊé®Â•®Ôºâ", key=mono_key)
                st.text_input("„Éú„Çø„É≥„ÅÆ„É™„É≥„ÇØÔºà#articleX „Åæ„Åü„ÅØ URLÔºâ", key=f"link_{i}", value=f"#article{i+1}")

            st.text_area("„Ç≥„É°„É≥„ÉàÊú¨ÊñáÔºàË§áÊï∞Ë°åOKÔºâ", key=f"comment_{i}", value="üí¨ ")

            mono_final = (st.session_state.get(f"mono_{i}", "") or auto_monogram(st.session_state.get(f"name_{i}", "")))[:1]

            cards_data.append(
                {
                    "issue": st.session_state.get(f"issue_{i}", ""),
                    "title": st.session_state.get(f"title_{i}", ""),
                    "comment": st.session_state.get(f"comment_{i}", ""),
                    "name": st.session_state.get(f"name_{i}", ""),
                    "org": st.session_state.get(f"org_{i}", ""),
                    "bio": st.session_state.get(f"bio_{i}", ""),
                    "link": st.session_state.get(f"link_{i}", f"#article{i+1}"),
                    "monogram": mono_final,
                    "strip_color": strip_color,
                    "comment_bar_color": comment_bar_color,
                }
            )

# ‚ë£ ÁîüÊàê„Éª„Éó„É¨„Éì„É•„Éº„Éª„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
st.subheader("‚ë£ ÁîüÊàê„Éª„Éó„É¨„Éì„É•„Éº„Éª„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ")

# NEW: „Åæ„Å®„ÇÅË°®Á§∫„ÅÆÂàáÊõøÔºà„Éá„Éï„Ç©„É´„ÉàONÔºâ
st.caption("‚Äª Âêå‰∏ÄË®ò‰∫ãÔºàÂè∑Êï∞Ôºã„Çø„Ç§„Éà„É´Ôºã„É™„É≥„ÇØÔºâ„ÅåË§áÊï∞Ë°å„ÅÇ„ÇãÂ†¥Âêà„ÄÅ1Êûö„ÅÆ„Ç´„Éº„Éâ„Å´Ëá™Âãï„Åß„Åæ„Å®„ÇÅ„Çâ„Çå„Åæ„Åô„ÄÇ")
use_grouping = st.checkbox("Âêå‰∏ÄË®ò‰∫ã„Çí1Êûö„Å´„Åæ„Å®„ÇÅ„Çã", value=True)

# „Ç´„Éº„ÉâHTML„ÇíÊßãÁØâ
cards_html_list: List[str] = []
if use_grouping:
    grouped = group_cards_by_article(cards_data)
    for idx, g in enumerate(grouped):
        cards_html_list.append(
            render_card_grouped(
                idx=idx,
                issue_label=g["issue"],
                article_title=g["title"],
                link_url=g["link"],
                strip_color=g["strip_color"],
                entries=g["entries"],
            )
        )
else:
    for idx, c in enumerate(cards_data):
        cards_html_list.append(
            render_card(
                idx=idx,
                issue_label=c.get("issue", ""),
                article_title=c.get("title", ""),
                comment_text=c.get("comment", ""),
                commenter_name=c.get("name", ""),
                commenter_org=c.get("org", ""),
                link_url=c.get("link", f"#article{idx+1}"),
                strip_color=c.get("strip_color") or color_cycle(idx),
                monogram=c.get("monogram", ""),
                comment_bar_color=c.get("comment_bar_color", "#2563eb"),
                commenter_bio=c.get("bio", ""),
            )
        )

# ÂÖ®‰ΩìHTML
full_html = render_email_full(
    title_text=title_text,
    badge_text=badge_text,
    header_title=header_title,
    delivery_text=delivery_text,
    description_text=description_text,
    cards=cards_html_list if cards_html_list else ["<!-- No cards -->"],
)

# 2„Ç´„É©„É†ÔºöÂ∑¶=„ÇΩ„Éº„Çπ/„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„ÄÅÂè≥=„Éó„É¨„Éì„É•„Éº
lc, rc = st.columns([1.0, 1.1])

with lc:
    st.markdown("**ÁîüÊàê„Åï„Çå„ÅüHTMLÔºà„Ç≥„Éî„ÉºÁî®Ôºâ**")
    st.text_area("HTML„ÇΩ„Éº„Çπ", value=full_html, height=420, label_visibility="collapsed")

    fname = f"comment_clip_{delivery_date.strftime('%Y%m%d')}.html"
    st.download_button(
        "HTML„Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ",
        data=full_html.encode("utf-8"),
        file_name=fname,
        mime="text/html",
        use_container_width=True,
    )

with rc:
    st.markdown("**„Éó„É¨„Éì„É•„ÉºÔºà„Éñ„É©„Ç¶„Ç∂ÊèèÁîªÔºâ**")
    # „Åæ„Å®„ÇÅ„Çã„Å®„Ç´„Éº„Éâ1Êûö„ÅÆÈ´ò„Åï„Åå‰∏ä„Åå„Çã„ÅÆ„Åß„ÇÑ„ÇÑÂ§ö„ÇÅ„Å´Á¢∫‰øù
    preview_height = 520 + max(0, len(cards_html_list)) * 320
    try:
        st_html(full_html, height=min(max(preview_height, 600), 2400), scrolling=True)
    except Exception:
        st.info("„Éó„É¨„Éì„É•„ÉºË°®Á§∫„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„Åå„ÄÅHTMLËá™‰Ωì„ÅØ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åß„Åç„Åæ„Åô„ÄÇ")

st.markdown("---")
with st.expander("‰Ωø„ÅÑÊñπ„É°„É¢", expanded=False):
    st.markdown(
        """
1. **Âü∫Êú¨Ë®≠ÂÆö**„Åß„Éê„ÉÉ„Ç∏Âêç„Éª„Éò„ÉÉ„ÉÄ„Éº„ÉªÈÖç‰ø°Êó•„ÉªË™¨ÊòéÊñá„ÇíÂÖ•Âäõ„Åó„Åæ„Åô„ÄÇ  
2. **„Ç≥„É°„É≥„ÉÜ„Éº„Çø„ÉºË®≠ÂÆö**„ÅßÊ∞èÂêç„ÉªÊâÄÂ±û„ÉªÁï•Ê≠¥„Éª„É¢„Éé„Ç∞„É©„É†„ÇíÁ∑®ÈõÜ„Åó„Åæ„Åô„ÄÇ  
3. **„Ç´„Éº„ÉâË®≠ÂÆö**„Åß„ÄÅÂêå„ÅòË®ò‰∫ãÔºàÂè∑Êï∞Ôºã„Çø„Ç§„Éà„É´Ôºã„É™„É≥„ÇØÔºâ„ÅÆ„Ç≥„É°„É≥„ÉàË°å„ÇíË§áÊï∞‰ΩúÊàê„Åô„Çã„Å®„ÄÅ‚ë£„Åß**1Êûö„Å´Ëá™ÂãïÁµ±Âêà**„Åï„Çå„Åæ„Åô„ÄÇ  
4. Âè≥ÂÅ¥„Åß„Éó„É¨„Éì„É•„Éº„ÇíÁ¢∫Ë™ç„Åó„ÄÅ**HTML„Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ**„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ  
        """.strip()
    )

